// /Users/apichet/solana-arbitrage-bot/src/arbitrage.js
const axios = require('axios');
const { TRANSACTION_FEE } = require('./config');
const { executeTrade } = require('./executeTrade');
const { checkBalance } = require('./checkWallet');

// üìä ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
const MIN_SPREAD = 1.2; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤
const MAX_SPREAD = 1.5;
const MAX_RETRIES = 3;

const MIN_BALANCE_REQUIRED = 0.05;
const SLIPPAGE_TOLERANCE = 0.02; // Slippage ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
const MAX_TRADE_AMOUNT = 0.015; // ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏•‡∏á
const DELAY_BETWEEN_TRADES = 20000; // ‡∏£‡∏≠ 20 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
const MAX_TRADES_PER_HOUR = 2; // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏ó‡∏£‡∏î
const STOP_LOSS_THRESHOLD = 0.002; // 0.2% Stop-Loss

const DISCORD_WEBHOOK_URL = process.env.DISCORD_WEBHOOK_URL;

// üéØ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
let tradeCount = 0;
let cumulativeLoss = 0;
let lastTradeTimestamp = Date.now();

// üì© ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
async function sendNotification(message) {
  try {
    await axios.post(DISCORD_WEBHOOK_URL, { content: message });
  } catch (error) {
    console.error("‚ùå Failed to send notification:", error.message);
  }
}

// üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏à‡∏£‡∏¥‡∏á
async function getActualTransactionFee() {
  try {
    const response = await axios.get('https://api.solscan.io/txs?limit=1');
    const fee = response.data.data[0]?.fee || 0.000005; // fallback
    return fee / 1e9; // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å lamports ‚Üí SOL
  } catch (error) {
    console.error("‚ùå Failed to fetch actual fee:", error.message);
    return TRANSACTION_FEE;
  }
}

// üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Arbitrage
async function checkArbitrage() {
  let retries = 0;

  while (retries < MAX_RETRIES) {
    try {
      const walletBalance = await checkBalance();
      if (walletBalance < MIN_BALANCE_REQUIRED) {
        console.warn(`‚ö†Ô∏è Balance too low: ${walletBalance.toFixed(4)} SOL`);
        return false;
      }

      // üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
      if (Date.now() - lastTradeTimestamp > 3600000) {
        tradeCount = 0;
        lastTradeTimestamp = Date.now();
      }

      if (tradeCount >= MAX_TRADES_PER_HOUR) {
        console.log("‚è∏Ô∏è Max trades per hour reached.");
        return false;
      }

      const TRADE_AMOUNT = Math.min(walletBalance * 0.1, MAX_TRADE_AMOUNT);
      const amountInLamports = Math.floor(TRADE_AMOUNT * 1e9);

      // üåê ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å Jupiter Aggregator
      const response = await axios.get(`https://quote-api.jup.ag/v6/quote`, {
        params: {
          inputMint: 'So11111111111111111111111111111111111111112',
          outputMint: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',
          amount: amountInLamports,
        },
      });

      const data = response.data;

      if (data && data.outAmount && data.swapUsdValue) {
        const buyPrice = parseFloat(data.swapUsdValue);
        const sellPrice = parseFloat(data.outAmount) / 1e6;
        const actualFee = await getActualTransactionFee();

        console.log(`üí∞ Buy: ${buyPrice.toFixed(4)} USD | üíµ Sell: ${sellPrice.toFixed(4)} USDC`);

        const spread = ((sellPrice - buyPrice) / buyPrice) * 100;
        console.log(`üìä Spread: ${spread.toFixed(2)}%`);

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏ó‡∏£‡∏î
        if (!isNaN(buyPrice) && !isNaN(sellPrice)) {
          const netProfit = sellPrice - buyPrice - actualFee;
          console.log(`üìà Net Profit: ${netProfit.toFixed(4)} USDC`);

          if (spread >= MIN_SPREAD && spread <= MAX_SPREAD && netProfit > 0) {
            console.log("üöÄ Executing Trade...");

            const transactionSignature = await executeTrade(TRADE_AMOUNT);
            if (transactionSignature) {
              tradeCount++;
              await sendNotification(`üö® **Trade Executed!**\nüí∞ Amount: ${TRADE_AMOUNT} SOL\nüìà Net Profit: ${netProfit.toFixed(4)} USDC`);
              console.log(`üîó View on Explorer: https://explorer.solana.com/tx/${transactionSignature}?cluster=mainnet-beta`);
            } else {
              console.error("‚ùå Trade execution failed.");
            }

            await new Promise((resolve) => setTimeout(resolve, DELAY_BETWEEN_TRADES));
            return true;
          } else {
            console.warn("‚ö†Ô∏è Skipping trade: low spread or negative profit.");
            cumulativeLoss += netProfit < 0 ? Math.abs(netProfit) : 0;

            if (cumulativeLoss >= walletBalance * STOP_LOSS_THRESHOLD) {
              console.log("üõë Stop-loss activated.");
              await sendNotification(`‚ùå **Stop-Loss Triggered!**\nCumulative Loss: ${cumulativeLoss.toFixed(4)} USDC`);
              return false;
            }
          }
        } else {
          console.warn("‚ö†Ô∏è Invalid price data, skipping.");
        }

        return false;
      } else {
        console.error("‚ùå Invalid response from API.");
        return false;
      }
    } catch (error) {
      if (error.response && error.response.status === 429) {
        const delay = Math.pow(2, retries) * 300;
        console.warn(`‚ö†Ô∏è Too Many Requests. Retrying in ${delay} ms...`);
        await new Promise((resolve) => setTimeout(resolve, delay));
        retries++;
      } else {
        console.error("‚ùå Error:", error.message);
        return false;
      }
    }
  }

  console.error("‚ùå Max retries reached.");
  return false;
}

module.exports = { checkArbitrage };

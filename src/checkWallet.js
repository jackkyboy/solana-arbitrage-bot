// /Users/apichet/solana-arbitrage-bot/src/checkWallet.js
const { Connection, PublicKey } = require('@solana/web3.js');
require('dotenv').config({ path: './config/.env' });

// üåê ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Solana RPC
const connection = new Connection(process.env.RPC_URL, 'confirmed');
const publicKey = new PublicKey(process.env.PUBLIC_KEY);

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô
async function checkBalance() {
  try {
    const balance = await connection.getBalance(publicKey);
    const solBalance = balance / 1e9;
    console.log(`üí∞ Balance: ${solBalance.toFixed(6)} SOL`);
    return solBalance;
  } catch (error) {
    console.error('‚ùå Failed to check balance:', error);
    return 0;
  }
}

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô
async function checkWallet() {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ RPC
    const version = await connection.getVersion();
    console.log('‚úÖ Connected to Solana RPC Version:', version);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô
    const balance = await checkBalance();
    console.log(`üëú Wallet Address: ${publicKey.toBase58()}`);
    console.log(`üí∞ Balance: ${balance.toFixed(6)} SOL`);
  } catch (error) {
    console.error('‚ùå Failed to connect wallet:', error);
  }
}

// üåü ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡∏î‡∏π‡∏•
if (require.main === module) {
  checkWallet();
}

// üì§ Export ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô
module.exports = { checkBalance, connection, publicKey };

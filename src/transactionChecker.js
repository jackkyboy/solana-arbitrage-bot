// /Users/apichet/solana-arbitrage-bot/src/transactionChecker.js
const { Connection } = require('@solana/web3.js');
require('dotenv').config({ path: './config/.env' });

// üåê ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Solana RPC
const connection = new Connection(process.env.RPC_URL, {
  commitment: 'confirmed',
  confirmTransactionInitialTimeout: 60000, // ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout ‡πÄ‡∏õ‡πá‡∏ô 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
});

async function confirmTransactionWithRetry(signature) {
  let attempts = 0;
  const maxAttempts = 10;
  const delay = 3000; // ‡∏£‡∏≠ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô retry

  while (attempts < maxAttempts) {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      const blockHeight = await connection.getBlockHeight();
      console.log(`üü¢ Current block height: ${blockHeight}`);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
      const result = await connection.getTransaction(signature, {
        encoding: 'jsonParsed'
      });

      if (result && result.meta && result.meta.err === null) {
        console.log(`‚úÖ Transaction Confirmed: ${signature}`);
        return true;
      }

      console.log(`üîÑ Retry attempt ${attempts + 1}/${maxAttempts}...`);

      // ‡∏£‡∏≠ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô retry
      await new Promise(resolve => setTimeout(resolve, delay));
      attempts++;
    } catch (error) {
      console.error(`‚ùå Error confirming transaction (Attempt ${attempts + 1}):`, error);
      await new Promise(resolve => setTimeout(resolve, delay)); // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏Å‡πà‡∏≠‡∏ô retry
    }
  }

  console.error(`‚ùå Transaction not confirmed after ${maxAttempts} attempts.`);
  return false;
}

module.exports = { confirmTransactionWithRetry };

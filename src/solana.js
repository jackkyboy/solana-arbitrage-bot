const {
  Connection,
  Keypair,
  Transaction,
  SystemProgram,
  sendAndConfirmTransaction,
  LAMPORTS_PER_SOL,
} = require('@solana/web3.js');
const fs = require('fs');
const path = require('path');
require('dotenv').config({ path: './config/.env' });

// üåê ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Solana RPC
const connection = new Connection(process.env.RPC_URL, 'finalized');

// üîë ‡πÇ‡∏´‡∏•‡∏î Private Key
const privateKey = Uint8Array.from(process.env.PRIVATE_KEY.split(',').map(Number));
const keypair = Keypair.fromSecretKey(privateKey);

// üìÇ Path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log
const logPath = path.join(__dirname, '../logs/trades.log');

// üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ RPC
async function checkRPCConnection() {
  try {
    const version = await connection.getVersion();
    console.log(`‚úÖ Connected to Solana RPC Version:`, version);
  } catch (error) {
    console.error('‚ùå Failed to connect to Solana RPC:', error);
  }
}

// üîç ‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô Wallet
async function checkBalance() {
  try {
    const balance = await connection.getBalance(keypair.publicKey);
    return balance / LAMPORTS_PER_SOL;
  } catch (error) {
    console.error('‚ùå Failed to check balance:', error);
    return 0;
  }
}

// üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå log
function logTrade(tradeData) {
  const logEntry = `${new Date().toISOString()} - ${JSON.stringify(tradeData)}\n`;
  try {
    fs.appendFileSync(logPath, logEntry);
    console.log('üìù Trade logged:', logEntry);
  } catch (error) {
    console.error('‚ùå Error writing to log:', error);
  }
}

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Transaction ‡∏î‡πâ‡∏ß‡∏¢ `getTransaction()` ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° Retry
async function confirmTransaction(signature) {
  try {
    console.log(`üîç Checking confirmation for Transaction: ${signature}`);
    let attempt = 0;
    let confirmed = false;

    while (attempt < 5 && !confirmed) {
      const result = await connection.getTransaction(signature, { encoding: 'jsonParsed' });

      if (result && result.meta && result.meta.err === null) {
        console.log(`‚úÖ Transaction Confirmed on Blockchain: ${signature}`);
        confirmed = true;
        break;
      }

      attempt++;
      console.log(`üîÑ Retry attempt ${attempt}/5`);
      await new Promise((resolve) => setTimeout(resolve, 5000)); // ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô retry
    }

    if (!confirmed) {
      console.error(`‚ùå Transaction Failed or Not Confirmed after retries: ${signature}`);
    }

    return confirmed;
  } catch (error) {
    console.error('üö® Error confirming transaction:', error);
    return false;
  }
}

// üöÄ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢ SOL ‡∏à‡∏£‡∏¥‡∏á
async function executeTrade(amountSOL, sellPriceUSDC) {
  try {
    console.log('üì§ Starting a new trade...');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
    const initialBalance = await checkBalance();
    console.log(`üí∞ Initial Balance: ${initialBalance.toFixed(4)} SOL`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î
    if (initialBalance < amountSOL) {
      console.error('‚ùå Insufficient SOL balance for trade.');
      return null;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Transaction
    const transaction = new Transaction().add(
      SystemProgram.transfer({
        fromPubkey: keypair.publicKey,
        toPubkey: keypair.publicKey, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Address ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á
        lamports: Math.floor(amountSOL * LAMPORTS_PER_SOL),
      })
    );

    // ‡∏™‡πà‡∏á Transaction ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö Signature
    const signature = await sendAndConfirmTransaction(connection, transaction, [keypair]);
    console.log(`üì® Transaction Signature: ${signature}`);
    console.log(`üîó View transaction on Solana Explorer: https://explorer.solana.com/tx/${signature}?cluster=mainnet-beta`);

    // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
    const isConfirmed = await confirmTransaction(signature);

    if (isConfirmed) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
      const finalBalance = await checkBalance();
      const deductedAmount = (initialBalance - finalBalance).toFixed(4);

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£ (Net Profit)
      const buyPrice = amountSOL; // ‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ SOL
      const netProfit = (sellPriceUSDC - buyPrice).toFixed(4);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß
      logTrade({
        action: 'Trade Executed',
        amountSOL,
        transaction: signature,
        deductedSOL: deductedAmount,
        initialBalance,
        finalBalance,
        netProfit,
        timestamp: new Date().toISOString(),
      });

      console.log(`‚úÖ Trade completed! Deducted: ${deductedAmount} SOL`);
      console.log(`üìä Net Profit: ${netProfit} USDC`);
      return signature;
    } else {
      console.error('‚ùå Transaction was not confirmed after multiple retries.');
      return null;
    }
  } catch (error) {
    console.error('‚ùå Trade failed:', error);
    return null;
  }
}

module.exports = { executeTrade, checkRPCConnection };
